package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"text/template"

	"gopkg.in/yaml.v3"
)

type Topic struct {
	Name        string `yaml:"name"`
	Partitions  int    `yaml:"partitions"`
	Replication int    `yaml:"replication"`
	Description string `yaml:"description"`
}

type TopicsYAML struct {
	Topics []Topic `yaml:"topics"`
}

const tpl = `// Code generated by generate_topics.go. DO NOT EDIT.

package topics

const (
{{- range . }}
	{{ .ConstName }} KafkaTopic = "{{ .Name }}"
{{- end }}
)

var TopicDescriptions = map[KafkaTopic]string{
{{- range . }}
	{{ .ConstName }}: "{{ .Description }}",
{{- end }}
}
`

func toConstName(name string) string {
	name = strings.ReplaceAll(name, ".", "_")
	name = strings.ReplaceAll(name, "-", "_")
	name = strings.Title(name)
	return "Topic" + toCamel(name)
}

func toCamel(s string) string {
	parts := strings.Split(s, "_")
	for i, p := range parts {
		parts[i] = strings.Title(p)
	}
	return strings.Join(parts, "")
}

func main() {
	_, filename, _, ok := runtime.Caller(0)
	if !ok {
		log.Fatal("unable to get current file path")
	}

	scriptDir := filepath.Dir(filename)
	yamlPath := filepath.Join(scriptDir, "..", "topics.yaml")

	data, err := os.ReadFile(yamlPath)
	if err != nil {
		log.Fatalf("read topics.yaml: %v", err)
	}

	var yamlData TopicsYAML
	if err := yaml.Unmarshal(data, &yamlData); err != nil {
		log.Fatalf("parse yaml: %v", err)
	}

	type TopicData struct {
		ConstName   string
		Name        string
		Description string
	}

	var topics []TopicData
	for _, t := range yamlData.Topics {
		topics = append(topics, TopicData{
			ConstName:   toConstName(t.Name),
			Name:        t.Name,
			Description: t.Description,
		})
	}

	t, err := template.New("topics").Parse(tpl)
	if err != nil {
		log.Fatal(err)
	}

	var buf bytes.Buffer
	if err := t.Execute(&buf, topics); err != nil {
		log.Fatal(err)
	}

	err = os.WriteFile("topics.go", buf.Bytes(), 0644)
	if err != nil {
		log.Fatalf("write topics.go: %v", err)
	}

	fmt.Println("âœ… topics.go generated")
}
